{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","measurementArchiveHostname","jsonData","maHostname","name","q","withCredentials","headers","basicAuth","length","target","response","data","_","each","push","p","val","ts","datapoints","options","backend_request","method","datasourceRequest","then","dataset","rsp","targets","filter","t","hide","_request_data","range","interval","format","maxDataPoints","map","undefined","Promise","res","rej","_request","series_promises","get_dataset","all","series_data","status","message","title","resolve","query","hostname","result","d","i","text","value","isObject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.measurementArchiveHostname = instanceSettings.jsonData.maHostname;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n// http://158.125.250.70/esmond/perfsonar/archive/010646242f574ca3b1d191d9b563ceb1/packet-count-sent/aggregations/3600\n// http://145.23.253.34/esmond/perfsonar/archive/248d16f1035f440aa1239d4a4bafd245/\n// http://145.23.253.34/esmond/perfsonar/archive/4187d2d6f4344491be2962b509c57f83/throughput/averages/86400\n//http://145.23.253.34/esmond/perfsonar/archive/\n\n  dataset(target, response) {\n\n    var data = [];\n    _.each(response.data, p => {\n        data.push([p.val, 1000 * p.ts])\n    });\n    return {\n        target: target,\n        datapoints: data \n    };\n  }\n\n  get_dataset(options, target) {\n\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + target,\n        method: 'GET'\n    }\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => { return this.dataset(target, rsp); });\n  }\n  \n  query(options) {\n\n   var targets = _.filter(options.targets, t => {\n       return !t.type || t.type == 'timeserie'\n   });\n   targets = targets.filter(t => !t.hide);\n\n    var _request_data = {\n        range: options.range,\n        interval: options.interval,\n        format: \"json\",\n        maxDataPoints: options.maxDataPoints,\n        targets: _.map(targets, t => { return t.target })\n    };\n    if (targets === undefined || targets.length == 0) {\n        return new Promise( (res, rej) => {\n            return res({\n                _request: { data: _request_data},\n                data: []\n            });\n        });\n    }\n\n\n//    if (this.templateSrv.getAdhocFilters) {\n//      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n//    } else {\n//      query.adhocFilters = [];\n//    }\n\n    var series_promises = _.map(targets, t => {\n        return this.get_dataset(_request_data, t.target)\n    });\n    return Promise.all(series_promises).then(series_data => {\n        return {\n            _request: { data: _request_data },\n            data: series_data\n        };\n    });\n  }\n\n  testDatasource() {\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        // HACK HACK: grafana removes 1 trailing slash & doesn't follow redirects\n        url: this.url + \"/esmond/perfsonar//\",\n        method: 'GET'\n    }\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            if (rsp.status === 200) {\n                return {\n                    status: \"success\",\n                    message: \"Data source is working\",\n                    title: \"Success\"\n                 };\n        }\n    });\n  }\n\n  annotationQuery(options) {\n    return Promise.resolve([]);\n  }\n\n  metricFindQuery(query) {\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + \"/grafana/timeseries\",\n        method: 'POST',\n        data: { hostname: this.measurementArchiveHostname }\n    };\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            if (rsp.status !== 200) {\n                return undefined;\n            }\n            return rsp.data;\n        });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n/*\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n*/\n\n  getTagKeys(options) {\n    return Promise.resolve([]);\n  }\n \n  getTagValues(options) {\n    return Promise.resolve([]);\n  }\n\n}\n"]}