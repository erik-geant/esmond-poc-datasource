{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","measurementArchiveHostname","jsonData","maHostname","name","q","withCredentials","headers","basicAuth","length","target","response","data","_","each","push","p","val","ts","datapoints","options","backend_request","method","hostname","tsurl","datasourceRequest","then","rsp","targets","filter","t","hide","_request_data","range","interval","format","maxDataPoints","map","measurement_type","undefined","Promise","res","rej","_request","series_promises","get_dataset","all","series_data","status","message","title","resolve","query","console","log","types","text","value","participants","query_result","x","window","source","destination","result","d","i","isObject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.measurementArchiveHostname = instanceSettings.jsonData.maHostname;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n// http://158.125.250.70/esmond/perfsonar/archive/010646242f574ca3b1d191d9b563ceb1/packet-count-sent/aggregations/3600\n// http://145.23.253.34/esmond/perfsonar/archive/248d16f1035f440aa1239d4a4bafd245/\n// http://145.23.253.34/esmond/perfsonar/archive/4187d2d6f4344491be2962b509c57f83/throughput/averages/86400\n//http://145.23.253.34/esmond/perfsonar/archive/\n\n  dataset(target, response) {\n\n    var data = [];\n    _.each(response.data, p => {\n        data.push([p.val, 1000 * p.ts])\n    });\n    return {\n        target: target,\n        datapoints: data \n    };\n  }\n\n  get_dataset(options, target) {\n\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + '/grafana/timeseries',\n        method: 'POST',\n        data: {\n            hostname: this.measurementArchiveHostname,\n            tsurl: target\n        }\n    };\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            return {\n                target: target,\n                datapoints: rsp.data\n            };\n        });\n  }\n  \n  query(options) {\n\n   var targets = options.targets.filter(t => !t.hide);\n\n   var _request_data = {\n       range: options.range,\n       interval: options.interval,\n       format: \"json\",\n       maxDataPoints: options.maxDataPoints,\n       targets: _.map(targets, t => { return t.measurement_type })\n   };\n\n    if (targets === undefined || targets.length == 0) {\n        return new Promise( (res, rej) => {\n            return res({\n                _request: { data: _request_data},\n                data: []\n            });\n        });\n    }\n\n\n//    if (this.templateSrv.getAdhocFilters) {\n//      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n//    } else {\n//      query.adhocFilters = [];\n//    }\n\n    var series_promises = _.map(targets, t => {\n        return this.get_dataset(_request_data, t.measurement_type)\n    });\n    return Promise.all(series_promises).then(series_data => {\n        return {\n            _request: { data: _request_data },\n            data: series_data\n        };\n    });\n  }\n\n  testDatasource() {\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        url: this.url + '/grafana/version',\n        method: 'GET'\n    }\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            if (rsp.status === 200) {\n                return {\n                    status: \"success\",\n                    message: \"Data source is working\",\n                    title: \"Success\"\n                 };\n        }\n    });\n  }\n\n  annotationQuery(options) {\n    return Promise.resolve([]);\n  }\n\n  metricFindQuery(query) {\nconsole.log(\"metricFindQuery\");\nconsole.log(query);\n\n\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n\turl: this.url + \"/grafana/measurement-types\",\n        method: 'POST',\n        data: { hostname: this.measurementArchiveHostname }\n    };\n\n    if (query.query == 'measurement types') {\n      backend_request.url = this.url + \"/grafana/measurement-types\";\n    } else if (query.query == 'participants') {\n      backend_request.url = this.url + \"/grafana/participants\";\n      backend_request.data['measurement-type'] = query.measurement_type;\n    } else if (query.query == 'metric types') {\n      var types = [\n        \"standard-deviation\",\n        \"median\",\n        \"maximum\",\n        \"minimum\",\n        \"mode\",\n        \"percentile-75\",\n        \"percentile-25\",\n        \"percentile-95\",\n        \"variance\",\n        \"mean\"\n     ]\n\n      return Promise.resolve(\n        _.map(types, t => {\n          return {text: t, value: t};\n        })\n      );\n    } else if (query.query == 'summaries') {\n      backend_request.url = this.url + \"/grafana/summaries\";\n      backend_request.data['measurement-type'] = query.measurement_type;\n      backend_request.data['metadata-key']\n        = query.participants['metadata-key'] || '';\n    }\n\nconsole.log(backend_request);\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\nconsole.log(\"rsp\");\nconsole.log(rsp);\n            if (rsp.status !== 200) {\n                return undefined;\n            }\n\n            var query_result = null;\n            \n            if (query.query == 'summaries') {\n              query_result = _.map(rsp.data, x => {\n                return {\n                  text: x.type + \":\" + x.window,\n                  value: x\n                };\n              });\n            } else if (query.query == 'participants') {\n              query_result = _.map(rsp.data, x => {\n                return {\n                  text: x.source + \"->\" + x.destination,\n                  value: x\n                };\n              });\n            } else {\n              query_result = _.map(rsp.data, x => {\n                  return {text: x, value: x};\n              });\n            }\n\nconsole.log(\"query result for: \" + query.query);\nconsole.log(query_result);\n\n            return query_result;\n        });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n/*\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n*/\n\n  getTagKeys(options) {\n    return Promise.resolve([]);\n  }\n \n  getTagValues(options) {\n    return Promise.resolve([]);\n  }\n\n}\n"]}