{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","measurementArchiveHostname","jsonData","maHostname","name","q","withCredentials","headers","basicAuth","length","target","response","data","_","each","push","p","val","ts","datapoints","options","metric","backend_request","method","hostname","tsurl","datasourceRequest","then","rsp","targets","filter","t","hide","summary","uri","_request_data","range","interval","format","maxDataPoints","map","undefined","Promise","res","rej","_request","series_promises","get_dataset","measurement_type","participants","text","metric_type","all","series_data","status","message","title","resolve","query","query_result","x","window","value","source","destination","result","d","i","isObject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.measurementArchiveHostname = instanceSettings.jsonData.maHostname;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n// http://158.125.250.70/esmond/perfsonar/archive/010646242f574ca3b1d191d9b563ceb1/packet-count-sent/aggregations/3600\n// http://145.23.253.34/esmond/perfsonar/archive/248d16f1035f440aa1239d4a4bafd245/\n// http://145.23.253.34/esmond/perfsonar/archive/4187d2d6f4344491be2962b509c57f83/throughput/averages/86400\n//http://145.23.253.34/esmond/perfsonar/archive/\n\n  dataset(target, response) {\n\n    var data = [];\n    _.each(response.data, p => {\n        data.push([p.val, 1000 * p.ts])\n    });\n    return {\n        target: target,\n        datapoints: data \n    };\n  }\n\n  get_dataset(options, name, target, metric) {\n\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + '/grafana/timeseries',\n        method: 'POST',\n        data: {\n            hostname: this.measurementArchiveHostname,\n            tsurl: target\n        }\n    };\n    if (metric) {\n      backend_request.data.metric = metric;\n    }\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            return {\n                target: name,\n                datapoints: rsp.data\n            };\n        });\n  }\n  \n  query(options) {\n\n   var targets = _.filter(options.targets, t => {\n     return !t.hide;\n   });\n   targets = _.filter(targets, t => {\n     return t.summary && t.summary.uri;\n   });\n\n   var _request_data = {\n       range: options.range,\n       interval: options.interval,\n       format: \"json\",\n       maxDataPoints: options.maxDataPoints,\n       targets: _.map(targets, t => { return t.summary.uri })\n   };\n\n    if (targets === undefined || targets.length == 0) {\n        return new Promise( (res, rej) => {\n            return res({\n                _request: { data: _request_data},\n                data: []\n            });\n        });\n    }\n\n    var series_promises = _.map(targets, t => {\n        return this.get_dataset(\n          _request_data,\n          t.measurement_type + \":\" + t.participants.text + \":\" + t.metric_type + \":\" + t.summary.text,\n          t.summary.uri,\n          t.metric_type)\n    });\n    return Promise.all(series_promises).then(series_data => {\n        return {\n            _request: { data: _request_data },\n            data: series_data\n        };\n    });\n  }\n\n  testDatasource() {\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        url: this.url + '/grafana/version',\n        method: 'GET'\n    }\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            if (rsp.status === 200) {\n                return {\n                    status: \"success\",\n                    message: \"Data source is working\",\n                    title: \"Success\"\n                 };\n        }\n    });\n  }\n\n  annotationQuery(options) {\n    return Promise.resolve([]);\n  }\n\n  metricFindQuery(query) {\n\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n\turl: this.url + \"/grafana/measurement-types\",\n        method: 'POST',\n        data: { hostname: this.measurementArchiveHostname }\n    };\n\n    if (query.query == 'measurement types') {\n      backend_request.url = this.url + \"/grafana/measurement-types\";\n    } else if (query.query == 'participants') {\n      backend_request.url = this.url + \"/grafana/participants\";\n      backend_request.data['measurement-type'] = query.measurement_type;\n    } else if (query.query == 'metric types') {\n      backend_request.url = this.url + \"/grafana/metric-types\";\n//      var types = [\n//        \"standard-deviation\",\n//        \"median\",\n//        \"maximum\",\n//        \"minimum\",\n//        \"mode\",\n//        \"percentile-75\",\n//        \"percentile-25\",\n//        \"percentile-95\",\n//        \"variance\",\n//        \"mean\"\n//     ]\n//\n//      return Promise.resolve(\n//        _.map(types, t => {\n//          return {text: t, value: t};\n//        })\n//      );\n    } else if (query.query == 'summaries') {\n      backend_request.url = this.url + \"/grafana/summaries\";\n      backend_request.data['measurement-type'] = query.measurement_type;\n      backend_request.data['metadata-key']\n        = query.participants['metadata-key'] || '';\n    }\n\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            if (rsp.status !== 200) {\n                return undefined;\n            }\n\n            var query_result = null;\n            \n            if (query.query == 'summaries') {\n              query_result = _.map(rsp.data, x => {\n                x.text = x.type + \":\" + x.window;\n                return {\n                  text: x.text,\n                  value: x\n                };\n              });\n            } else if (query.query == 'participants') {\n              query_result = _.map(rsp.data, x => {\n                x.text = x.source + \"->\" + x.destination;\n                return {\n                  text: x.text,\n                  value: x\n                };\n              });\n            } else {\n              query_result = _.map(rsp.data, x => {\n                  return {text: x, value: x};\n              });\n            }\n\n            return query_result;\n        });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n/*\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n*/\n\n  getTagKeys(options) {\n    return Promise.resolve([]);\n  }\n \n  getTagValues(options) {\n    return Promise.resolve([]);\n  }\n\n}\n"]}