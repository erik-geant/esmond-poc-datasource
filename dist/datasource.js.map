{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","replace","key","jsonData","measurementKey","name","q","withCredentials","headers","basicAuth","length","target","response","console","log","data","_","each","push","p","val","ts","result","datapoints","options","backend_request","method","datasourceRequest","then","dataset","rsp","targets","filter","t","hide","_request_data","range","interval","format","maxDataPoints","map","undefined","Promise","res","rej","_request","series_promises","get_dataset","all","series_data","status","message","title","resolve","query","ts_types","metrics","m","includes","summaries","text","destination","s","value","uri","d","i","isObject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    var url = instanceSettings.url;\n    if (url) {\n        url = url.replace(/\\/$/, '');\n    }\n    this.url = url;\n    var key = instanceSettings.jsonData.measurementKey;\n    if (key) {\n        key = key.replace(/\\/$/, '').replace(/^\\//, '');\n    }\n    this.measurementKey = key;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {\n        'Content-Type': 'application/json',\n    };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n// http://158.125.250.70/esmond/perfsonar/archive/010646242f574ca3b1d191d9b563ceb1/packet-count-sent/aggregations/3600\n\n// http://145.23.253.34/esmond/perfsonar/archive/248d16f1035f440aa1239d4a4bafd245/\n// http://145.23.253.34/esmond/perfsonar/archive/4187d2d6f4344491be2962b509c57f83/throughput/averages/86400\n\n  dataset(target, response) {\n\nconsole.log(\"### handling dataset response\");\nconsole.log(\"target\");\nconsole.log(target);\nconsole.log(\"response\");\nconsole.log(response);\n    var data = [];\n    _.each(response.data, p => {\n        data.push([p.val, p.ts])\n    });\nvar result = {\n        target: target,\n        datapoints: data \n    };\nconsole.log(result);\nreturn result;\n  }\n\n  get_dataset(options, target) {\n\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + target,\n        method: 'GET'\n    }\nconsole.log(\"*** get_dataset\");\nconsole.log(backend_request);\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => { return this.dataset(target, rsp); });\n//     \n//     \n//             backend_request).then(rsp => {\n//                 return RSLV(ds.dataset(target, rsp));\n//             })\n//         });\n  }\n  \n  query(options) {\n\nconsole.log(\"query options***\");\nconsole.log(options);\n\n   var targets = _.filter(options.targets, t => {\n       return !t.type || t.type == 'timeserie'\n   });\n   targets = targets.filter(t => !t.hide);\n\n    var _request_data = {\n        range: options.range,\n        interval: options.interval,\n        format: \"json\",\n        maxDataPoints: options.maxDataPoints,\n        targets: _.map(targets, t => { return t.target })\n    };\n    if (targets === undefined || targets.length == 0) {\n        return new Promise( (res, rej) => {\n            return res({\n                _request: { data: _request_data},\n                data: []\n            });\n        });\n    }\n\n\n//    if (this.templateSrv.getAdhocFilters) {\n//      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n//    } else {\n//      query.adhocFilters = [];\n//    }\n\n    var series_promises = _.map(targets, t => {\n        return this.get_dataset(_request_data, t.target)\n    });\n    return Promise.all(series_promises).then(series_data => {\n        return {\n            _request: { data: _request_data },\n            data: series_data\n        };\n    });\n  }\n\n  testDatasource() {\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        // HACK HACK: grafana removes 1 trailing slash & doesn't follow redirects\n//        url: this.url + \"/esmond/perfsonar/archive/\" + this.measurementKey + \"//\",\n        url: this.url + \"/esmond/perfsonar//\",\n        method: 'GET'\n    }\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            if (rsp.status === 200) {\n                return {\n                    status: \"success\",\n                    message: \"Data source is working\",\n                    title: \"Success\"\n                 };\n        }\n    });\n  }\n\n  annotationQuery(options) {\n    return Promise.resolve([]);\n  }\n\n  metricFindQuery(query) {\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        // HACK HACK: grafana removes 1 trailing slash & doesn't follow redirects\n//        url: this.url + \"/esmond/perfsonar/archive/\" + this.measurementKey + \"//\",\n        url: this.url + \"/esmond/perfsonar/archive//\",\n        method: 'GET'\n    };\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            if (rsp.status !== 200) {\n                return undefined;\n            }\n            var ts_types = [\"throughput\", \"packet-count-sent\", \"packet-count-lost\"];\n            var metrics = [];\n            _.each(rsp.data, m => {\n                _.each(m[\"event-types\"], t => {\n                    if (ts_types.includes(t[\"event-type\"])) {\n                        _.each(t.summaries, s => {\n                            metrics.push({\n                                text: m.destination + \", \" + t[\"event-type\"] + \" [\" + s[\"summary-window\"] + \"]\",\n                                value: s.uri\n                            });\n                        });\n                    }\n                });\n            });\nconsole.log(metrics);\n            return metrics;\n//http://145.23.253.34/esmond/perfsonar/archive/\n        });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n/*\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n*/\n\n  getTagKeys(options) {\n    return Promise.resolve([]);\n  }\n \n  getTagValues(options) {\n    return Promise.resolve([]);\n  }\n\n}\n"]}