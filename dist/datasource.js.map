{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","measurementArchiveHostname","jsonData","maHostname","name","q","withCredentials","headers","basicAuth","length","target","response","data","_","each","push","p","val","ts","datapoints","options","backend_request","method","hostname","tsurl","datasourceRequest","then","rsp","targets","filter","t","hide","_request_data","range","interval","format","maxDataPoints","map","undefined","Promise","res","rej","_request","series_promises","get_dataset","all","series_data","resolve","status","message","title","query","result","d","i","text","value","isObject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.measurementArchiveHostname = instanceSettings.jsonData.maHostname;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n    };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n// http://158.125.250.70/esmond/perfsonar/archive/010646242f574ca3b1d191d9b563ceb1/packet-count-sent/aggregations/3600\n// http://145.23.253.34/esmond/perfsonar/archive/248d16f1035f440aa1239d4a4bafd245/\n// http://145.23.253.34/esmond/perfsonar/archive/4187d2d6f4344491be2962b509c57f83/throughput/averages/86400\n//http://145.23.253.34/esmond/perfsonar/archive/\n\n  dataset(target, response) {\n\n    var data = [];\n    _.each(response.data, p => {\n        data.push([p.val, 1000 * p.ts])\n    });\n    return {\n        target: target,\n        datapoints: data \n    };\n  }\n\n  get_dataset(options, target) {\n\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + '/grafana/timeseries',\n        method: 'POST',\n        data: {\n            hostname: this.measurementArchiveHostname,\n            tsurl: target\n        }\n    };\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            return {\n                target: target,\n                datapoints: rsp.data\n            };\n        });\n  }\n  \n  query(options) {\n\n   var targets = _.filter(options.targets, t => {\n       return !t.type || t.type == 'timeserie'\n   });\n   targets = targets.filter(t => !t.hide);\n\n    var _request_data = {\n        range: options.range,\n        interval: options.interval,\n        format: \"json\",\n        maxDataPoints: options.maxDataPoints,\n        targets: _.map(targets, t => { return t.target })\n    };\n    if (targets === undefined || targets.length == 0) {\n        return new Promise( (res, rej) => {\n            return res({\n                _request: { data: _request_data},\n                data: []\n            });\n        });\n    }\n\n\n//    if (this.templateSrv.getAdhocFilters) {\n//      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n//    } else {\n//      query.adhocFilters = [];\n//    }\n\n    var series_promises = _.map(targets, t => {\n        return this.get_dataset(_request_data, t.target)\n    });\n    return Promise.all(series_promises).then(series_data => {\n        return {\n            _request: { data: _request_data },\n            data: series_data\n        };\n    });\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n        status: \"success\",\n        message: \"Data source is working\",\n        title: \"Success\"\n    });\n\n//    var backend_request = {\n//        withCredentials: this.withCredentials,\n//        headers: this.headers,\n//        // HACK HACK: grafana removes 1 trailing slash & doesn't follow redirects\n//        url: this.url,\n//        method: 'GET'\n//    }\n//    return this.backendSrv.datasourceRequest(backend_request).then(\n//        rsp => {\n//            if (rsp.status === 200) {\n//                return {\n//                    status: \"success\",\n//                    message: \"Data source is working\",\n//                    title: \"Success\"\n//                 };\n//        }\n//    });\n  }\n\n  annotationQuery(options) {\n    return Promise.resolve([]);\n  }\n\n  metricFindQuery(query) {\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + \"/grafana/metrics\",\n        method: 'POST',\n        data: { hostname: this.measurementArchiveHostname }\n    };\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\n            if (rsp.status !== 200) {\n                return undefined;\n            }\n            return rsp.data;\n        });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n/*\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n*/\n\n  getTagKeys(options) {\n    return Promise.resolve([]);\n  }\n \n  getTagValues(options) {\n    return Promise.resolve([]);\n  }\n\n}\n"]}