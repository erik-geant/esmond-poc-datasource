{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","replace","key","jsonData","measurementKey","name","q","withCredentials","headers","basicAuth","length","target","response","data","_","each","push","p","ts","value","datapoints","options","backend_request","method","console","log","datasourceRequest","then","dataset","rsp","targets","filter","t","hide","_request_data","range","interval","format","maxDataPoints","map","undefined","Promise","res","rej","_request","series_promises","get_dataset","all","series_data","status","message","title","resolve","query","text","result","d","i","isObject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    var url = instanceSettings.url;\n    if (url) {\n        url = url.replace(/\\/$/, '');\n    }\n    var key = instanceSettings.jsonData.measurementKey;\n    if (key) {\n        key = key.replace(/\\/$/, '').replace(/^\\//, '');\n    }\n    this.url = url + \"/esmond/perfsonar/archive/\" + key + \"/\";\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {\n        'Content-Type': 'application/json',\n    };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n// http://158.125.250.70/esmond/perfsonar/archive/010646242f574ca3b1d191d9b563ceb1/packet-count-sent/aggregations/3600\n\n// http://145.23.253.34/esmond/perfsonar/archive/248d16f1035f440aa1239d4a4bafd245/\n\n// remove trailing slashes\n\n  dataset(target, response) {\n    var data = [];\n    _.each(response.data, p => {\n        data.push([p.ts, p.value])\n    });\n    return {\n        target: target,\n        datapoints: data \n    };\n  }\n\n  get_dataset(options, target) {\n\n    target = target.replace(/\\/$/, '').replace(/^\\//, '');\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url + target,\n        method: 'GET'\n    }\nconsole.log(\"*** get_dataset\");\nconsole.log(backend_request);\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => { return this.dataset(target, rsp); });\n//     \n//     \n//             backend_request).then(rsp => {\n//                 return RSLV(ds.dataset(target, rsp));\n//             })\n//         });\n  }\n  \n  query(options) {\n\n   var targets = _.filter(options.targets, t => {\n       return !t.type || t.type == 'timeserie'\n   });\n   targets = targets.filter(t => !t.hide);\n\n    var _request_data = {\n        range: options.range,\n        interval: options.interval,\n        format: \"json\",\n        maxDataPoints: options.maxDataPoints,\n        targets: _.map(targets, t => { return t.target })\n    };\n    if (targets === undefined || targets.length == 0) {\n        return new Promise( (res, rej) => {\n            return res({\n                _request: { data: _request_data},\n                data: []\n            });\n        });\n    }\n\ntargets = [\n    { target: 'packet-count-sent/aggregations/3600' },\n    { target: 'packet-count-sent/aggregations/86400' }\n];\n\n\n\n//    if (this.templateSrv.getAdhocFilters) {\n//      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n//    } else {\n//      query.adhocFilters = [];\n//    }\n\n    var series_promises = _.map(targets, t => {\n        return this.get_dataset(_request_data, t.target)\n    });\n    return Promise.all(series_promises).then(series_data => {\n        return {\n            _request: { data: _request_data },\n            data: series_data\n        };\n    });\n  }\n\n  testDatasource() {\n    var backend_request = {\n        withCredentials: this.withCredentials,\n        headers: this.headers,\n        url: this.url,\n        method: 'GET'\n    }\nconsole.log(\"**testDatasource\");\nconsole.log(backend_request);\n    return this.backendSrv.datasourceRequest(backend_request).then(\n        rsp => {\nconsole.log(\"datasourceRequest response\");\nconsole.log(rsp);\n            if (rsp.status === 200) {\n                return {\n                    status: \"success\",\n                    message: \"Data source is working\",\n                    title: \"Success\"\n                };\n        }\n    });\n  }\n\n  annotationQuery(options) {\n    return Promise.resolve([]);\n  }\n\n  metricFindQuery(query) {\n    return Promise.resolve(\n       [{text: \"aaaa\", value: \"aaaa\"}]\n    );\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n/*\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n*/\n\n  getTagKeys(options) {\n    return Promise.resolve([]);\n  }\n \n  getTagValues(options) {\n    return Promise.resolve([]);\n  }\n\n}\n"]}